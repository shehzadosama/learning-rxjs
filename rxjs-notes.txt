Observable:
- its a data source.
- a stream which emits data time to time.
- for getting data you have to subscribe a data stream.

Observer:
- A piece of code which used to subscribe the observable.

Promise and Observable:
- Promise:
    - async
    - Return single value(either reject or resolve).
    - mostly we use promises for asyc operations.

- Observable:
    - async or sync.
    - return stream of values.


async keyword:
- async keyword with function always returns promise.
- async getData() {
    return "Data Received";
  }



FromEvent:
- creates stream from specified event like mouse click.
- example: 
    fromEvent(this.btn.nativeElement, 'click')
      .subscribe(console.log);



Interval:
- it creates stream and emit data after specified duration.
- example:
    let observableRef = interval(2000).subscribe(data=>{
      console.log(data);
      if(data >= 15){
        observableRef.unsubscribe();
      }
    });



Timer:
- same as interval but it takes additional argument which is delay, timer(delay, interval).
- example: 
    let observableRef = timer(5000, 2000).subscribe(data=>{
      console.log(data);
      if(data >= 15){
        observableRef.unsubscribe();
      }
    });



Of:
- It converts the argument in an observable sequence.
- emits data in one go.
- example:
    //emits values of any type
    const source = Rx.Observable.of({name: 'Brian'}, [1,2,3], function hello(){ return 'Hello'});
    //output: {name: 'Brian}, [1,2,3], function hello() { return 'Hello' }
    const subscribe = source.subscribe(val => console.log(val));



from:
- Turns an array, promise and string into observable.
- emits data in sequence.
- example:
    from(new Promise((resolve, reject) => resolve("promise resolved"))).subscribe(console.log);
    // with string
    from(this.title).subscribe(console.log);
    // with array
    from([1, 2, 3, 4, 5, 6, 7, 8, 9]).subscribe(console.log)



toArray:
- Collects all source emissions and emits them as an array when the source completes.
- example: 
    const source = interval(1000);
    source
      .pipe(take(10), toArray())
      .subscribe(console.log);


    const source1 = from(this.data)
    source1
    .pipe(toArray())
    .subscribe(console.log);



CustomObservable:
- Create an observable with given subscription function.
- example:
    const customObservable$ = new Observable(observer => {
      setTimeout(() => observer.next("data emit 1"), 1000);
      setTimeout(() => observer.next("data emit 2"), 2000);
      setTimeout(() => observer.next("data emit 3"), 3000);
      
    });
    customObservable$.subscribe(console.log);



map:
- Use to transform the stream data.
- example:
    const source = Rx.Observable.from([{name: 'Joe', age: 30}, {name: 'Frank', age: 20},{name: 'Ryan', age: 50}]);
    //grab each persons name
    const example = source.map(person => person.name);
    //output: "Joe","Frank","Ryan"
    const subscribe = example.subscribe(val => console.log(val));



pluck:
- to get the property of stream's data object.
- example:
    const source = from([
        { name: 'Joe', age: 30 },
        { name: 'Sarah', age: 35 }
        ]);
    //grab names
    const example = source.pipe(pluck('name'));
    //output: "Joe", "Sarah"
    const subscribe = example.subscribe(val => console.log(val));



tap:
- return identical observable as source observable and can be use for logging each value emit by source observable.
- example:
    const source = of(1,2,3,4,5);
    //transparently log values from source with do
    const example = source
        .tap(val => console.log(`BEFORE MAP: ${val}`))
        .map(val => val + 10)
        .tap(val => console.log(`AFTER MAP: ${val}`));
    //tap does not transform values
    //output: 11...12...13...14...15
    const subscribe = example.subscribe(val => console.log(val));

